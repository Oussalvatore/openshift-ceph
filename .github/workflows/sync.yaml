name: Sync Upstream

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

env:
  ODF_UPSTREAM_REPO: "github.com/red-hat-storage/odf-operator"
  OCS_UPSTREAM_REPO: "github.com/red-hat-storage/odf-operator"
  UPSTREAM_BRANCHES: "main 4.14 4.15 4.16"

jobs:
  sync:
    name: Sync Upstream
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.WORKFLOW_TOKEN }}

      - name: Create branches for the new ODF releases
        run: |
          # Set git config
          git config --global user.name "GitHub Actions"
          git config --global user.email "41898282+github-actions@users.noreply.github.com"
          git config --global checkout.defaultRemote "origin"
          # Init ODF and OCS in the main branch
          git submodule update --init
          # Get the list of available ODF branches
          for branch in $UPSTREAM_BRANCHES;\
            do\
               git checkout -b "$branch";\
               git submodule set-branch -b "$branch" odf-operator;\
               git submodule set-branch -b "$branch" ocs-operator;\
               git add .gitmodules;\
               git commit -m 'Set the branch for ODF and OCS submodules';\
               git submodule update --remote odf-operator;\
               git submodule update --remote ocs-operator;\
               git add odf-operator;\
               git add ocs-operator;\
               git commit -m 'Init ODF and OCS submodules';\
               git push --set-upstream origin "$branch";\
            done\          

      - name: Update existing branches
        run: |
          # Set git config
          git config --global user.name "GitHub Actions"
          git config --global user.email "41898282+github-actions@users.noreply.github.com"
          git config --global checkout.defaultRemote "origin"
          git submodule update --init;\
          # Fetch all remote branches
          git fetch origin
          git branch -r | grep 'origin/release-[0-9]\.[0-9]\+$' | grep -v HEAD | while read line; do if [[ -z $(git ls-remote --heads origin "${line#origin/}") ]]; then \
              git checkout -b "${line#origin/}";\
              git branch -u "${line}";\
              git reset --hard "${line}"
              git submodule update --remote;\
              git add .;\
              git commit -m 'Syncing submodules with upstream';\
              git push;\
           fi; done
